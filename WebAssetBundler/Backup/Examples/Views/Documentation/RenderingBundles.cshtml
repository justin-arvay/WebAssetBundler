@{
    ViewBag.Title = "Rendering";
    Layout = "~/Views/Shared/_DocumentationLayout.cshtml";
}

<h2>Rendering Bundles</h2>
<p>Configured bundles are rendered using the name provided in the configuration step. For example:</p>
<pre data-language="csharp">
public override void Configure()
{
    Name("Scripts");
    Add("~/Scripts/jquery-1.9.0.min.js");
}
</pre>

<p>In order to render the script bundle in the view you would:</p>
<pre data-language="csharp">
@@Bundler.Scripts.Render("Script")

//modifying the html elements
@@Bundler.Scripts.Render("Script", b => b
    .Asnyc()
    .AddAttribute("test", "test"))
</pre>

<p>If you want to render a style sheet bundle in the view you would:</p>
<pre data-language="csharp">
@@Bundler.StyleSheets.Render("StyleSheet")

//modifying the html elements
@@Bundler.StyleSheets.Render("StyleSheet", b => b
    .Rel("media")
    .AddAttribute("test", "test"))
</pre>

<h6>Rending Images</h6>
<p>You can render images as bundles which will process the image using the @Html.RouteLink("image pipeline", "Documentation", new { path = "pipelines" }). Like
other bundles, image bundles are cached and versioned. Example:</p>
<pre data-language="csharp">
@Html.Code(@"
@Bundler.Images.Render(""~/Images/logo.png"");

//modifying the html elements
@Bundler.Images.Render(""~/Images/Logo.png"", b => b
    .AddClass(""logo"")
    .Alt(""Web Asset Bundler Logo""))
")
</pre>
<p>The <strong>Render</strong> method excepts a virtual path to the image like other resources. It will render the image tag for you</p>

<h2>Including Assets</h2>
<p>If you need to render a single asset, but want that asset to take advantage of the bundle pipeline, you can do it like so:</p>
<pre data-language="csharp">
//javascript include
@@Bundler.Scripts.Include("~/Script/test.js")

//style sheet include
@@Bundler.StyleSheets.Include("~/Content/test.css")
</pre>
<p>You must provide the relative or virtual path to the asset. From there it will be processed by the pipeline like any other bundle. </p>

<h3>External Assets</h3>
<p>You can also render external assets. This does not provide any tangible benefits. For now, it merely allows for consistency.</p>
<pre data-language="csharp">
//javascript external include
@@Bundler.Scripts.Include("https://apis.google.com/js/plusone.js")

//style sheet external include
@@Bundler.StyleSheets.Include("https://apis.google.com/test.css")
</pre>