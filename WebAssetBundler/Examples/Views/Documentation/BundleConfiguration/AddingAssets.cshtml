@{
    ViewBag.Title = "AddingAssets";
    Layout = "~/Views/Shared/_DocumentationLayout.cshtml";
}

<h2>Add Single Assets</h2>

<p>The <strong>Add</strong> method takes a relative or virtual path to the file you are adding to the bundle. Here 
is an example:</p>

<pre data-language="csharp">
public override void Configure()
{
    //virtual path add
    Add("~/Scripts/jquery-1.9.0.min.js");

    //relative path add
    Add("jquery-ui-1.10.0.custom.min.js");
}
</pre>

<h2>Adding Per Directory</h2>
<p>You can also add assets based on a directory. Here is an example:</p>
<pre data-language="csharp">
public override void Configure()
{
    //adds all assets in a specific directory
    AddFromDirectory("~/Script");

    //adds assets based on criteria
    AddFromDirectory("~/Script", a => a
        .Pattern("jQuery*")));
}
</pre>
<p>The above example will only include assets from the script directory that start with <strong>jQuery</strong>. Multiple 
wildcards can be used. For instance:</p>
<pre data-language="csharp">
public override void Configure()
{
    AddFromDirectory("~/Script", a => a
        .Pattern("*jQuery*")));
}
</pre>
<p>This example will include all assets with the word jQuery in it.</p>

<h2>Additional Behavior</h2>
<p>When adding an asset a check is done to see if the asset is already considered minified. This check is done to ensure we do not 
waste processing time to re-minify something that does not need it. In addition this will also allow you to minify some assets ahead of time if you wish.</p>

<p>For example, if we have two files like so:</p>
<code>
~/Scripts/jQuery.js
~/Scripts/jQuery.min.js
</code>
<p>The <strong>~/Scripts/jQuery.min.js</strong> would be used as an asset instead of the jQuery.js file. If the application is set to debug mode, the raw 
<strong>~/Scripts/jQuery.js</strong> file will be used.</p>

<p>In order to identify which files are already considered minified, the provider will look at the file name. Any file name that matches this structure
will not be minifed again:</p>
<code>
../path/file-name.min.ext
</code>

<p>The identifier in this case is the <strong>.min</strong>. The <strong>.min</strong> must appear at the end of the file name, before the extension. You 
can configure this by changing a default setting like so:</p>
<pre data-language="csharp">
//script identifier
DefaultSettings.MinifyIdentifier = ".minified";

</pre>
<p>The above example would <strong>not</strong> minify assets with file names like this:</p>
<code>
../path/file-name.minified.ext
</code>