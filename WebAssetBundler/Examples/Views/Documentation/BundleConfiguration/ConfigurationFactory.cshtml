@{
    ViewBag.Title = "Configuration Provider";
    Layout = "~/Views/Shared/_DocumentationLayout.cshtml";
}

<h2>Custom Configuration Factory</h2>
<p>By default there is a build in configuration factory for each bundle type that will instantiate the different configuration types
that are inheriting from @Code("BundleConfiguration<T>"). You can override this and provide your own implementation if you need
to inject your own behavior.</p>

<p>The first thing you need to do is create a new implementation of providers. Here is an example that returns a hard coded list:</p>
<pre data-language="csharp">

@Html.Code(@"
using WebAssetBundler.Web.Mvc;

public class MyScriptConfigProvider : IConfigProvider<ScriptBundleConfiguration>
{
    public IList<ScriptBundleConfiguration> GetConfigs()
    {
        var configs = new List<ScriptBundleConfiguration>();
        configs.Add(new ScriptLayoutConfiguration());            

        return configs;
    }
}

public class MyStyleSheetConfigProvider : IConfigProvider<StyleSheetBundleConfiguration>
{
    public IList<StyleSheetBundleConfiguration> GetConfigs()
    {
        //similar to above
    }
}")
      
</pre>

<p>Now you just need to inform the bundler that you want to use your own provider:</p>
<pre data-language="csharp">
protected void Application_Start()
{
    AreaRegistration.RegisterAllAreas();

    RegisterGlobalFilters(GlobalFilters.Filters);
    RegisterRoutes(RouteTable.Routes);

    //register the new providers 
    DefaultSettings.ScriptConfigProvider = new MyScriptConfigProvider();
    DefaultSettings.StyleSheetConfigProvider = new MyStyleSheetConfigProvider();

}
</pre>

<p>The providers need to be registered <strong>before</strong> any rendering is done. In ASP.NET MVC framework, the 
Global.asax is the best place for that.</p>

<p>Using your own providers will give you mode freedom to configure the bundles as needed. For instance, you could use a custom provider to pull bundle
configurations from the database, xml, json or any other format required by your project.</p>